generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Zone {
  id             String          @id @default(uuid())
  name           String
  latitude       Float
  longitude      Float
  radius         Float
  createdAt      DateTime        @default(now())
  advertisements Advertisement[]
  vendors        Vendor[]
}

model Vendor {
  id              String   @id @default(uuid())
  firstName       String
  lastName        String
  phone           String   @unique
  email           String   @unique
  password        String
  storeLogo       String?
  storeCover      String?
  address         String?
  moduleType      String?
  vatTax          String?
  zoneId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  businessPlan    String?
  deliveryUnit    String?
  maxDeliveryTime String?
  minDeliveryTime String?
  businessName    String?
  status          Int?      @default(0)
  zone            Zone     @relation(fields: [zoneId], references: [id])

  @@index([zoneId], map: "Vendor_zoneId_fkey")
}

model Position {
  id             String          @id @default(uuid())
  index          Int
  amount         Float
  tax            Float
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  advertisements Advertisement[]
}

model Advertisement {
  id            String   @id @default(uuid())
  campaignName  String?
  moduleType    String?
  image         String?
  publishDate   DateTime?
  unpublishDate DateTime?
  positionId    String?
  zoneId        String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  position      Position? @relation(fields: [positionId], references: [id])
  zone          Zone?     @relation(fields: [zoneId], references: [id])

  @@index([positionId], map: "Advertisement_positionId_fkey")
  @@index([zoneId], map: "Advertisement_zoneId_fkey")
}

model Banner {
  id        Int      @id @default(autoincrement())
  image     String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id        Int      @id @default(autoincrement())
  name      String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cars      Car[]
}

model Brand {
  id        Int      @id @default(autoincrement())
  title     String?
  image     String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cars      Car[]
}

model CarType {
  id        Int      @id @default(autoincrement())
  title     String?
  image     String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cars      Car[]
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  status    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Facility {
  id        Int      @id @default(autoincrement())
  name      String
  image     String?
  status    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cars      Car[]    @relation("CarFacilities")
}

model Coupon {
  id             Int      @id @default(autoincrement())
  image          String?
  expiryDate     DateTime
  code           String
  title          String
  subtitle       String?
  status         Int
  minOrderAmount Float?
  value          Float
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Car {
  id                     Int        @id @default(autoincrement())
  image                  String
  status                 Int
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  brandId                Int
  carTypeId              Int
  cityId                 Int
  description            String?
  driverMobile           String?
  driverName             String?
  engineHP               Float?
  fuelType               String?
  gearSystem             String?
  hasAC                  Boolean
  latitude               Float?
  longitude              Float?
  minimumHoursRequired   Int?
  name                   String
  number                 String
  pickupAddress          String?
  priceType              String?
  rating                 Float?
  rentPriceWithDriver    Float?
  rentPriceWithoutDriver Float?
  totalDrivenKM          Float?
  totalSeat              Int?
  carOwner               String?
  bookings               Booking[]  @relation("CarToBooking")
  brand                  Brand      @relation(fields: [brandId], references: [id])
  carType                CarType    @relation(fields: [carTypeId], references: [id])
  city                   City       @relation(fields: [cityId], references: [id])
  facilities             Facility[] @relation("CarFacilities")

  @@index([carTypeId], map: "carTypeId")
  @@index([brandId], map: "brandId")
  @@index([cityId], map: "cityId")
}

model Gallery {
  id        Int      @id @default(autoincrement())
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carId     Int

  @@map("gallery")
}

model Page {
  id          Int      @id @default(autoincrement())
  title       String
  status      Int?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Booking {
  id         Int      @id @default(autoincrement())
  carId      Int
  customerId Int
  pickupDate DateTime
  pickupTime String
  dropDate   DateTime
  dropTime   String
  pickupOTP  String
  status     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  car        Car      @relation("CarToBooking", fields: [carId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])

  @@index([carId], map: "carId")
  @@index([customerId], map: "customerId")
}

model Customer {
  id       Int       @id @default(autoincrement())
  name     String
  mobile   String
  bookings Booking[]
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  mobile       String   @unique
  status       Int      @default(1)
  gender       String?
  password     String
  referralCode String?
  image        String?
  age          Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lat          Float?
  long         Float?
  address      String?
}

model OTP {
  id        String   @id @default(cuid())
  otp       String
  mobile    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model News {
  id          String     @id @default(cuid())
  title       String?
  description String?
  media       String?
  status      Int        @default(1)
  thumbnail   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  newsViews   NewsView[]
}

model NewsView {
  id        String   @id @default(cuid())
  userId    String
  newsId    String
  createdAt DateTime @default(now())
  news      News     @relation(fields: [newsId], references: [id])

  @@unique([userId, newsId])
  @@index([newsId], map: "NewsView_newsId_fkey")
}


model Tax {
    id                  String  @id @default(uuid())
    type                String? @unique
    tax                 Float? 
    createdAt           DateTime? @default(now())
    updatedAt           DateTime? @updatedAt
}

model carWashService {
  id                String   @id @default(uuid())
  serviceName       String
  serviceType       String
  serviceImages     Json     // Stores multiple images as a JSON array
  serviceDescription String?
  includingServices Json     // Stores the list of included services as a JSON array
  excludingServices Json     // Stores the list of excluded services as a JSON array
  termsAndConditions String?
  servicePrice      Float

  // Add vendorId to link each service with a vendor
  vendorId          String   // Foreign key to link with Vendor

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model vendorCoupon {
  id                Int      @id @default(autoincrement())
  title             String
  code              String   @unique
  type              String?
  limitPerUser      Int?      
  discountType      DiscountType 
  discountValue     Float
  startDate         DateTime
  endDate           DateTime?
  maxDiscount       Float?
  minOrderAmount    Float?
  users             Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum DiscountType {
  FLAT
  PERCENTAGE
}

