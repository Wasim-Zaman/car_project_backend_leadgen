// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        Int      @id @default(autoincrement())
  image     String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id        Int      @id @default(autoincrement())
  name     String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cars      Car[]    // This will create a relation to the Car model
}

model Brand {
  id        Int      @id @default(autoincrement())
  title     String?
  image     String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cars      Car[]    // This will create a relation to the Car model
}

model CarType {
  id        Int       @id @default(autoincrement())
  title     String?
  image     String?
  status    Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  cars      Car[]    // This will create a relation to the Car model
}


model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  status    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Facility {
  id        Int      @id @default(autoincrement())
  name      String
  image     String?
  status    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Minimal opposite field required by Prisma
  cars Car[] @relation("CarFacilities")
}

model Coupon {
  id                   Int      @id @default(autoincrement())
  image                String?  // This is optional, to store the file path or URL of the coupon image
  expiryDate           DateTime // The expiry date of the coupon
  code                 String   // The coupon code
  title                String   // The title of the coupon
  subtitle             String?  // The subtitle of the coupon, optional
  status               Int   // The status of the coupon
  minOrderAmount       Float?   // The minimum order amount for the coupon to be applicable, optional
  value                Float    // The value/discount of the coupon
  description          String?  // The description of the coupon, optional

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Car {
  id                     Int     @id @default(autoincrement())
  name                   String
  number                 String
  image                  String
  status                 Int
  rating                 Float?
  totalSeat              Int?
  hasAC                  Boolean
  driverName             String?
  driverMobile           String?
  gearSystem             String?
  rentPriceWithoutDriver Float?
  rentPriceWithDriver    Float?
  engineHP               Float?
  priceType              String?
  fuelType               String?
  description            String?
  pickupAddress          String?
  latitude               Float?
  longitude              Float?
  totalDrivenKM          Float?
  minimumHoursRequired   Int?
  carOwner               String?

  carTypeId Int
  brandId   Int
  cityId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carType    CarType    @relation(fields: [carTypeId], references: [id])
  brand      Brand      @relation(fields: [brandId], references: [id])
  city       City       @relation(fields: [cityId], references: [id])
  facilities Facility[] @relation("CarFacilities")

  @@index([carTypeId], name: "carTypeId")
  @@index([brandId], name: "brandId")
  @@index([cityId], name: "cityId")
}

model Gallery {
  id        Int      @id @default(autoincrement())
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carId     Int      // Foreign key field
  car       Car      @relation(fields: [carId], references: [id], name: "CarGalleries")
}