// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Zone {
  id        String   @id @default(uuid())  // Unique identifier for the zone
  name      String                         // Name of the zone
  latitude  Float                          // Latitude of the zone's center
  longitude Float                          // Longitude of the zone's center
  radius    Float                          // Radius of the zone in meters
  createdAt DateTime @default(now())       // Timestamp for when the zone is created
  vendors   Vendor[]                       // Relation to Vendor (but we won't use this directly)
  advertisements Advertisement[]
}

model Vendor {
  id              String   @id @default(uuid())
  firstName       String
  lastName        String
  phone           String   @unique
  email           String   @unique
  password        String
  businessName    String?   
  storeLogo       String?  
  storeCover      String?  
  address         String?   
  moduleType      String?   
  vatTax          String?  
  minDeliveryTime String? 
  maxDeliveryTime String? 
  deliveryUnit    String?
  businessPlan    String?


  // Foreign key to Zone
  zoneId          String   // Foreign key for Zone
  zone            Zone     @relation(fields: [zoneId], references: [id]) // Relation to Zone
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Position {
  id      String  @id @default(uuid())
  index   Int
  amount  Float
  tax     Float
  advertisements Advertisement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Advertisement {
  id                String   @id @default(uuid())    // Unique identifier for the advertisement
  campaignName      String                            // Name of the campaign
  moduleType        String                            // Type of the module (e.g., Home Banner, Side Banner)
  image             String                            // URL or path to the advertisement image
  publishDate       DateTime                          // Date and time when the advertisement is published
  unpublishDate     DateTime                          // Date and time when the advertisement is unpublished
  
  // Foreign keys and relationships
  positionId        String                            // Foreign key for Position
  position          Position  @relation(fields: [positionId], references: [id]) // Relation to Position model
  
  zoneId            String                            // Foreign key for Zone
  zone              Zone      @relation(fields: [zoneId], references: [id])     // Relation to Zone model

  createdAt         DateTime  @default(now())          // Timestamp for when the advertisement is created
  updatedAt         DateTime  @updatedAt              // Timestamp for when the advertisement is last updated
}




model Banner {
  id        Int      @id @default(autoincrement())
  image     String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id        Int      @id @default(autoincrement())
  name     String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cars      Car[]    // This will create a relation to the Car model
}

model Brand {
  id        Int      @id @default(autoincrement())
  title     String?
  image     String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cars      Car[]    // This will create a relation to the Car model
}

model CarType {
  id        Int       @id @default(autoincrement())
  title     String?
  image     String?
  status    Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  cars      Car[]    // This will create a relation to the Car model
}


model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  status    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Facility {
  id        Int      @id @default(autoincrement())
  name      String
  image     String?
  status    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Minimal opposite field required by Prisma
  cars Car[] @relation("CarFacilities")
}

model Coupon {
  id                   Int      @id @default(autoincrement())
  image                String?  // This is optional, to store the file path or URL of the coupon image
  expiryDate           DateTime // The expiry date of the coupon
  code                 String   // The coupon code
  title                String   // The title of the coupon
  subtitle             String?  // The subtitle of the coupon, optional
  status               Int   // The status of the coupon
  minOrderAmount       Float?   // The minimum order amount for the coupon to be applicable, optional
  value                Float    // The value/discount of the coupon
  description          String?  // The description of the coupon, optional

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Car {
  id                     Int     @id @default(autoincrement())
  name                   String
  number                 String
  image                  String
  status                 Int
  rating                 Float?
  totalSeat              Int?
  hasAC                  Boolean
  driverName             String?
  driverMobile           String?
  gearSystem             String?
  rentPriceWithoutDriver Float?
  rentPriceWithDriver    Float?
  engineHP               Float?
  priceType              String?
  fuelType               String?
  description            String?
  pickupAddress          String?
  latitude               Float?
  longitude              Float?
  totalDrivenKM          Float?
  minimumHoursRequired   Int?
  carOwner               String?

  carTypeId Int
  brandId   Int
  cityId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carType    CarType    @relation(fields: [carTypeId], references: [id])
  brand      Brand      @relation(fields: [brandId], references: [id])
  city       City       @relation(fields: [cityId], references: [id])
  facilities Facility[] @relation("CarFacilities")

  bookings   Booking[]  @relation("CarToBooking")


  @@index([carTypeId], name: "carTypeId")
  @@index([brandId], name: "brandId")
  @@index([cityId], name: "cityId")
}

model Gallery {
  id        Int      @id @default(autoincrement())
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carId     Int      // Foreign key to Car

  // No @relation attribute needed here
  @@map("gallery")  // Optional: Use if the actual table name differs
}

model Page {
  id          Int      @id @default(autoincrement())
  title       String
  status      Int?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Booking {
  id             Int      @id @default(autoincrement())
  carId          Int
  customerId     Int
  pickupDate     DateTime
  pickupTime     String
  dropDate       DateTime
  dropTime       String
  pickupOTP      String
  status         Int   
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Explicit relation name matching the minimal reciprocal relation in Car
  car            Car      @relation(fields: [carId], references: [id], name: "CarToBooking")
  customer       Customer @relation(fields: [customerId], references: [id])

  @@index([carId], name: "carId")
  @@index([customerId], name: "customerId")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  mobile    String
  bookings  Booking[]
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  mobile        String   @unique
  status        Int  @default(1)
  gender        String?
  password      String
  referralCode  String? 
  image         String?
  age           Int?
  lat           Float?
  long          Float?
  address       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OTP {
  id          String   @id @default(cuid())
  otp         String
  mobile      String   @unique
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}

model News {
    id          String      @id @default(cuid())
    title       String?
    description String?
    media       String?
    status      Int         @default(1)
    thumbnail   String?
    newsViews   NewsView[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model NewsView {
    id        String   @id @default(cuid())
    userId    String
    newsId    String
    news      News     @relation(fields: [newsId], references: [id])
    createdAt DateTime @default(now())

    @@unique([userId, newsId]) // Ensure a user can only view a news item once
}


